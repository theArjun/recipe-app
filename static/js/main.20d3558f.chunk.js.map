{"version":3,"sources":["Recipe.js","App.js","serviceWorker.js","index.js"],"names":["Recipe","props","useState","show","setShow","class","style","width","src","image","alt","title","Button","variant","onClick","Modal","onHide","Header","closeButton","Title","Body","className","ingredients","map","item","text","calories","toFixed","App","recipes","setRecipes","search","setSearch","query","setQuery","exampleReq","useEffect","getRecipes","a","fetch","response","json","data","hits","console","log","onSubmit","event","preventDefault","type","placeholder","onChange","target","value","recipe","label","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uTAuDeA,G,MAnDA,SAACC,GAAW,IAAD,EACAC,oBAAS,GADT,mBACjBC,EADiB,KACXC,EADW,KAexB,OACE,6BACE,yBAAKC,MAAM,OAAOC,MANL,CACfC,MAAO,UAMH,yBAAKF,MAAM,eAAeG,IAAKP,EAAMQ,MAAOC,IAAKT,EAAMU,QACvD,yBAAKN,MAAM,aACT,wBAAIA,MAAM,+BAA+BJ,EAAMU,OAC/C,uBAAGN,MAAM,aACP,kBAACO,EAAA,EAAD,CAAQC,QAAQ,UAAUC,QAnBjB,WACjBV,GAAQ,KAkBA,mBAIA,kBAACW,EAAA,EAAD,CAAOZ,KAAMA,EAAMa,OAnBT,WAClBZ,GAAQ,KAmBE,kBAACW,EAAA,EAAME,OAAP,CAAcC,aAAW,GACvB,kBAACH,EAAA,EAAMI,MAAP,KAAclB,EAAMU,MAApB,mBAEF,kBAACI,EAAA,EAAMK,KAAP,KAGI,wBAAIC,UAAU,+BACXpB,EAAMqB,YAAYC,KAAI,SAACC,GAAD,OACrB,wBAAIH,UAAU,mBAAmBG,EAAKC,cAQpD,yBAAKJ,UAAU,sCAAf,cACcpB,EAAMyB,SAASC,QAAQ,QCgC9BC,G,YA1EH,WACV,IADgB,EAIc1B,mBAAS,IAJvB,mBAIT2B,EAJS,KAIAC,EAJA,OAKY5B,mBAAS,IALrB,mBAKT6B,EALS,KAKDC,EALC,OAMU9B,mBAAS,WANnB,mBAMT+B,EANS,KAMFC,EANE,KAQVC,EAAU,0CAAsCF,EAAtC,mBAPD,WAOC,oBANA,oCAOhBG,qBAAU,WAERC,MACC,CAACJ,IAIJ,IAAMI,EAAU,uCAAG,8BAAAC,EAAA,sEACMC,MAAMJ,GADZ,cACXK,EADW,gBAEEA,EAASC,OAFX,OAEXC,EAFW,OAGjBZ,EAAWY,EAAKC,MAChBC,QAAQC,IAAIH,EAAKC,MAJA,2CAAH,qDAehB,OACE,yBAAKtB,UAAU,OACb,yBAAKA,UAAU,aACb,wBAAIA,UAAU,aAAd,cACA,uBAAGA,UAAU,QAAb,mBACA,wBAAIA,UAAU,SAEd,yBAAKA,UAAU,aACb,0BAAMyB,SAZI,SAACC,GACjBA,EAAMC,iBACNd,EAASH,KAWD,yBAAKV,UAAU,eACb,2BACE4B,KAAK,OACL5B,UAAU,gBACV6B,YAAY,0BACZC,SAtBO,SAACJ,GACpBf,EAAUe,EAAMK,OAAOC,UAuBb,yBAAKhC,UAAU,sBACb,4BAAQA,UAAU,0BAA0B4B,KAAK,UAAjD,eASV,yBAAK5B,UAAU,aACb,yBAAKA,UAAU,aACZQ,EAAQN,KAAI,SAAC+B,GAAD,OACX,kBAAC,EAAD,CACE3C,MAAO2C,EAAOA,OAAOC,MACrB7B,SAAU4B,EAAOA,OAAO5B,SACxBjB,MAAO6C,EAAOA,OAAO7C,MACrBa,YAAagC,EAAOA,OAAOhC,YAC3BkC,IAAKF,EAAOA,OAAOC,gBC3DbE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9B,QAAQ8B,MAAMA,EAAMC,c","file":"static/js/main.20d3558f.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Button, Modal } from \"react-bootstrap\";\nimport \"./Recipe.css\";\n\nconst Recipe = (props) => {\n  const [show, setShow] = useState(false);\n\n  const handleShow = () => {\n    setShow(true);\n  };\n\n  const handleClose = () => {\n    setShow(false);\n  };\n\n  const imgStyle = {\n    width: \"18rem\",\n  };\n\n  return (\n    <div>\n      <div class=\"card\" style={imgStyle}>\n        <img class=\"card-img-top\" src={props.image} alt={props.title} />\n        <div class=\"card-body\">\n          <h5 class=\"card-title font-weight-bold\">{props.title}</h5>\n          <p class=\"card-text\">\n            <Button variant=\"primary\" onClick={handleShow}>\n              See Ingredients\n            </Button>\n\n            <Modal show={show} onHide={handleClose}>\n              <Modal.Header closeButton>\n                <Modal.Title>{props.title} Ingredients :</Modal.Title>\n              </Modal.Header>\n              <Modal.Body>\n                \n                {\n                  <ul className=\"list-group list-group-flush\">\n                    {props.ingredients.map((item) => (\n                      <li className=\"list-group-item\">{item.text}</li>\n                    ))}\n                  </ul>\n                }\n              </Modal.Body>\n            </Modal>\n          </p>\n        </div>\n        <div className=\"card-footer text-muted font-italic\">\n          Calories : {props.calories.toFixed(3)}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Recipe;\n","import React, { useState, useEffect } from \"react\";\nimport Recipe from \"./Recipe\";\nimport \"bulma/css/bulma.css\";\nimport \"./App.css\";\n\n// useEffect runs everytime when any component is re-rendered.\nconst App = () => {\n  const APP_ID = \"4c92b890\";\n  const APP_KEY = \"9c14d5ba79dbebac968930ab1802e692\";\n\n  const [recipes, setRecipes] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [query, setQuery] = useState(\"chicken\");\n\n  const exampleReq = `https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`;\n  useEffect(() => {\n    // console.log(\"Click\");\n    getRecipes();\n  }, [query]); // Using empty array [] assures the useEffect renders only for once.\n  // One time call will be used for fetching the data from the API only once.\n  // Use the value here like [query], where want to use useEffect() hook to run when the value changes\n\n  const getRecipes = async () => {\n    const response = await fetch(exampleReq);\n    const data = await response.json();\n    setRecipes(data.hits);\n    console.log(data.hits);\n  };\n\n  const updateSearch = (event) => {\n    setSearch(event.target.value);\n  };\n\n  const getSearch = (event) => {\n    event.preventDefault();\n    setQuery(search);\n  };\n  return (\n    <div className=\"App\">\n      <div className=\"jumbotron\">\n        <h1 className=\"display-4\">Recipe App</h1>\n        <p className=\"lead\">Made with React</p>\n        <hr className=\"my-4\" />\n\n        <div className=\"container\">\n          <form onSubmit={getSearch}>\n            <div className=\"input-group\">\n              <input\n                type=\"text\"\n                className=\" form-control\"\n                placeholder=\"Search for recipes ... \"\n                onChange={updateSearch}\n              />\n              <div className=\"input-group-append\">\n                <button className=\"btn btn-outline-primary\" type=\"submit\">\n                  Search\n                </button>\n              </div>\n            </div>\n          </form>\n        </div>\n      </div>\n\n      <div className=\"container\">\n        <div className=\"card-deck\">\n          {recipes.map((recipe) => (\n            <Recipe\n              title={recipe.recipe.label}\n              calories={recipe.recipe.calories}\n              image={recipe.recipe.image}\n              ingredients={recipe.recipe.ingredients}\n              key={recipe.recipe.label} // I found recipe to be unique.\n            />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}